{"version":3,"sources":["views/admin/stores/components/TableListStore.js","views/admin/stores/pages/ListStorePage.js","views/admin/stores/index.jsx","components/skeleton/TableSkeleton.js","api/storeApi.js"],"names":["TableListStore","props","listStore","columns","field","headerName","width","renderCell","params","Avatar","variant","sx","height","alt","src","value","fCurrencyVN","Grid","item","xs","sm","md","style","rows","pageSize","rowsPerPageOptions","disableSelectionOnClick","defaultProps","ListStorePage","useState","isLoadFetchApiSuccess","setIsLoadFetchApiSuccess","setListStore","useEffect","a","handleGetListUser","storeApi","getAllStore","res","success","data","console","log","container","spacing","TableSkeleton","Member","match","useRouteMatch","path","url","component","animation","axisosClient","get","createStore","post","updateStore","id","put","getStoreByIdUser","getStoreTopFollow","getStoreUserCollection","collectionStore","deleteStoreUserCollection","delete","checkUserFollowStore"],"mappings":"0OAgBA,SAASA,EAAeC,GACpB,IAAQC,EAAcD,EAAdC,UAEFC,EAAU,CACZ,CAAEC,MAAO,KAAMC,WAAY,KAAMC,MAAO,IACxC,CACIF,MAAO,MACPC,WAAY,GACZC,MAAO,IACPC,WAAY,SAACC,GAAD,OAAa,8BAAK,cAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,GAAI,CAAEL,MAAO,GAAIM,OAAQ,IAAMC,IAAI,GAAGC,IAAKN,EAAOO,YAE7G,CACIX,MAAO,OACPC,WAAY,mBACZC,MAAO,KAEX,CACIF,MAAO,QACPC,WAAY,oCACZC,MAAO,KAEX,CACIF,MAAO,UACPC,WAAY,0CACZC,MAAO,KAEX,CACIF,MAAO,eACPC,WAAY,qBACZC,MAAO,IACPC,WAAY,SAACC,GAAD,OAAa,4BAAIQ,YAAYR,EAAOO,YAIxD,OACI,cAACE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA/B,SACI,qBAAKC,MAAO,CAAEV,OAAQ,IAAKN,MAAO,QAAlC,SACI,cAAC,IAAD,CACIiB,KAAMrB,EACNC,QAASA,EACTqB,SAAU,GACVC,mBAAoB,CAAC,IACrBC,yBAAuB,QA9C3C1B,EAAe2B,aAAe,CAC1BzB,UAAW,IAqDAF,Q,SChBA4B,MA1Cf,WACI,MAA0DC,oBAAS,GAAnE,mBAAOC,EAAP,KAA8BC,EAA9B,KACA,EAAkCF,mBAAS,IAA3C,mBAAO3B,EAAP,KAAkB8B,EAAlB,KAGAC,oBAAS,sBAAC,sBAAAC,EAAA,sEACAC,IADA,2CAEP,IAGH,IAAMA,EAAiB,uCAAG,4BAAAD,EAAA,sEAGdJ,GACAC,GAAyB,GAJX,SAOAK,IAASC,cAPT,QAOZC,EAPY,QAQVC,SACJP,EAAaM,EAAIE,MAErBT,GAAyB,GAXP,gDAclBU,QAAQC,IAAI,gBAdM,yDAAH,qDAmBvB,OACI,cAACzB,EAAA,EAAD,CAAM0B,WAAS,EAACC,QAAS,EAAzB,SAEQd,EACI,cAAC,EAAD,CAAgB5B,UAAWA,IAE3B,cAAC2C,EAAA,EAAD,OC7BLC,UATf,SAAgB7C,GACZ,IAAM8C,EAAQC,cACd,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,KAAI,UAAKF,EAAMG,KAAOC,UAAWvB,Q,iCCTpD,gEAGe,SAASiB,IACtB,OACE,cAAC,IAAD,CAAKlC,GAAI,CAAEL,MAAO,QAAlB,SACE,cAAC,IAAD,CACAK,GAAI,CAAEC,OAAQ,IAAKN,MAAO,QAC1BI,QAAQ,OACR0C,UAAU,a,qDCPVhB,EAAW,CACbC,YAAa,WAET,OAAOgB,IAAaC,IADX,YAGbC,YAAa,SAACf,GAEV,OAAOa,IAAaG,KADX,UACF,eAA2BhB,KAEtCiB,YAAa,SAACC,EAAGlB,GACb,IAAMU,EAAG,kBAAcQ,GACvB,OAAOL,IAAaM,IAAIT,EAAjB,eAA0BV,KAErCoB,iBAAkB,SAACF,GACf,IAAMR,EAAG,kBAAcQ,GACvB,OAAOL,IAAaC,IAAIJ,IAE5BW,kBAAmB,WAEf,OAAOR,IAAaC,IADX,qBAGbQ,uBAAwB,SAACJ,GACrB,IAAMR,EAAG,iCAA6BQ,GACtC,OAAOL,IAAaC,IAAIJ,IAE5Ba,gBAAiB,SAACvB,GAEd,OAAOa,IAAaG,KADX,oBACF,eAA0BhB,KAErCwB,0BAA2B,SAACxD,GAExB,OAAO6C,IAAaY,OADX,oBACsB,CAACzD,YAEpC0D,qBAAsB,SAAC1D,GAEnB,OAAO6C,IAAaC,IADX,sCACmB,CAAC9C,aAMtB4B","file":"static/js/36.ed28de4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Grid from '@mui/material/Grid';\r\nimport Avatar from '@mui/material/Avatar';\r\n//helper\r\nimport {fCurrencyVN} from \"helper/FormatNumber\";\r\n\r\nTableListStore.propTypes = {\r\n    listStore: PropTypes.array,\r\n}\r\n\r\nTableListStore.defaultProps = {\r\n    listStore: [],\r\n}\r\n\r\nfunction TableListStore(props) {\r\n    const { listStore } = props;\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 90 },\r\n        {\r\n            field: 'img',\r\n            headerName: '',\r\n            width: 110,\r\n            renderCell: (params) => (<div><Avatar variant=\"square\" sx={{ width: 56, height: 56 }} alt=\"\" src={params.value} /></div>)\r\n        },\r\n        {\r\n            field: 'name',\r\n            headerName: 'Cửa hàng',\r\n            width: 200,\r\n        },\r\n        {\r\n            field: 'phone',\r\n            headerName: 'Số điện thoại',\r\n            width: 150,\r\n        },\r\n        {\r\n            field: 'address',\r\n            headerName: 'Địa chỉ cửa hàng',\r\n            width: 250,\r\n        },\r\n        {\r\n            field: 'revenueMonth',\r\n            headerName: 'Doanh thu tháng',\r\n            width: 150,\r\n            renderCell: (params) => (<p>{fCurrencyVN(params.value)}</p>)\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Grid item xs={12} sm={12} md={12}>\r\n            <div style={{ height: 500, width: '100%' }}>\r\n                <DataGrid\r\n                    rows={listStore}\r\n                    columns={columns}\r\n                    pageSize={10}\r\n                    rowsPerPageOptions={[10]}\r\n                    disableSelectionOnClick\r\n                />\r\n            </div>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default TableListStore\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\n//api\r\nimport storeApi from \"api/storeApi\";\r\n\r\nimport TableListStore from \"../components/TableListStore\";\r\nimport TableSkeleton from \"components/skeleton/TableSkeleton\";\r\n\r\nfunction ListStorePage() {\r\n    const [isLoadFetchApiSuccess, setIsLoadFetchApiSuccess] = useState(false);\r\n    const [listStore, setListStore] = useState([]);\r\n\r\n    /*************** loading page when get list payment ************/\r\n    useEffect(async () => {\r\n        await handleGetListUser();\r\n    }, [])\r\n\r\n    /************** handle get list user ***************/\r\n    const handleGetListUser = async () => {\r\n        try {\r\n\r\n            if (isLoadFetchApiSuccess) {\r\n                setIsLoadFetchApiSuccess(false);\r\n            }\r\n\r\n            const res = await storeApi.getAllStore();\r\n            if (res.success) {\r\n                setListStore(res.data);\r\n            }\r\n            setIsLoadFetchApiSuccess(true);\r\n\r\n        } catch (error) {\r\n            console.log('error: ' + error);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            {\r\n                isLoadFetchApiSuccess ?\r\n                    <TableListStore listStore={listStore} />\r\n                    :\r\n                    <TableSkeleton />\r\n            }\r\n\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ListStorePage;","import React from 'react';\r\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport ListStorePage from \"./pages/ListStorePage\";\r\n\r\nfunction Member(props) {\r\n    const match = useRouteMatch();\r\n    return (\r\n        <Switch>\r\n            <Route path={`${match.url}`} component={ListStorePage} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Member;\r\n\r\n","import Box from '@mui/material/Box';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\nexport default function TableSkeleton() {\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Skeleton \r\n      sx={{ height: 400, width: '100%' }}\r\n      variant=\"rect\"\r\n      animation=\"wave\" />\r\n    </Box>\r\n  );\r\n}","import axisosClient from \"./axisosClient\";\r\n\r\nconst storeApi = {\r\n    getAllStore: () => {\r\n        const url = `/stores`;\r\n        return axisosClient.get(url);\r\n    },\r\n    createStore: (data) => {\r\n        const url = `/stores`;\r\n        return axisosClient.post(url, {...data});\r\n    },\r\n    updateStore: (id,data) => {\r\n        const url = `/stores/${id}`;\r\n        return axisosClient.put(url, {...data});\r\n    },\r\n    getStoreByIdUser: (id) => {\r\n        const url = `/stores/${id}`;\r\n        return axisosClient.get(url);\r\n    },\r\n    getStoreTopFollow: () => {\r\n        const url = `/store/topfollow`;\r\n        return axisosClient.get(url);\r\n    },\r\n    getStoreUserCollection: (id)=>{\r\n        const url = `/collection-store/user/${id}`;\r\n        return axisosClient.get(url);\r\n    },\r\n    collectionStore: (data)=>{\r\n        const url = `/collection-store`;\r\n        return axisosClient.post(url,{...data});\r\n    },\r\n    deleteStoreUserCollection: (params)=>{\r\n        const url = `/collection-store`;\r\n        return axisosClient.delete(url,{params});\r\n    },\r\n    checkUserFollowStore: (params)=>{\r\n        const url = `/collection-store/user-follow-store`;\r\n        return axisosClient.get(url,{params});\r\n    },\r\n}\r\n\r\n\r\n\r\nexport default storeApi;"],"sourceRoot":""}