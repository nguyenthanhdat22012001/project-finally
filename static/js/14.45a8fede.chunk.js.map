{"version":3,"sources":["api/postApi.js","views/client/posts/components/PostItem.js","views/client/posts/pages/PostsPage.js","validates/clientValidate.js","components/textarea/TextAreaFroala.js","views/client/posts/components/FormAddPost.js","views/client/posts/pages/AddPostPage.js","views/client/posts/components/CommentsPost.js","views/client/posts/components/ReplyCommentDialog.js","views/client/posts/pages/PostDetailPage.js","helper/validates.js","views/client/posts/index.jsx","components/dialog/ProccessDialog.js","helper/FormatDate.js"],"names":["postApi","getPostAll","axisosClient","get","getPostBySlug","slug","url","addPost","data","post","getComments","id","addComments","getThumsUbByPost","post_id","likePost","removeLikePost","checkUserLikePost","params","PostItem","props","to","className","name","dangerouslySetInnerHTML","__html","description","fontSize","totalThumb","totalComment","defaultProps","ProductPage","useState","posts","setPosts","useEffect","getPosts","a","res","success","console","log","role","Breadcrumbs","Link","underline","color","href","Typography","length","Grid","container","spacing","item","xs","Button","variant","size","type","sx","borderRadius","IconButton","map","Stack","Pagination","count","postSchema","yup","shape","required","min","TextAreaFroala","onModelChange","handleOnChangeDescription","tag","config","attribution","placeholder","toolbarButtons","moreText","buttons","moreParagraph","moreRich","moreMisc","align","buttonsVisible","pluginsEnabled","FormAddPost","setDescription","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Box","component","noValidate","onSubmit","obj","handleAddPost","gutterBottom","TextField","fullWidth","margin","label","helperText","message","error","text","AddPostPage","user","useSelector","state","auth","enqueueSnackbar","useSnackbar","isProccess","setIsProccess","handleGetPost","newData","user_id","handleNotiDialog","ProccessDialog","CommentsPost","comments","handleToggleDialogReplyCommen","sub_comments","AvatarCircelShortText","distanceToNow","created_at","comment","onClick","ReplyCommentDialog","openDialogReplyComment","hanldeReplyComment","refInput","useRef","Dialog","open","onClose","maxWidth","DialogTitle","DialogContent","TextareaAutosize","minRows","style","width","ref","DialogActions","current","value","PostDetailPage","summaryPost","setSummaryPost","setLikePost","idPostReply","setIdPostReply","setOpenDialogReplyComment","btnLoading","setBtnLoading","textComment","setTextComment","setPost","setComments","useParams","Promise","all","getPostDetail","hanldeCheckUserLikePost","getThumsUpOfPost","getCommentOfPost","listComment","totalThumbsUp","hanldeAddComment","boolean","parent_id","newComments","hangleToggleLikePost","islike","object","Object","keys","justifyContent","alignItems","startIcon","multiline","onChange","event","target","checked","LoadingButton","loading","Index","match","useRouteMatch","exact","path","PostsPage","zIndex","theme","drawer","formatdateYMD","dateObj","Date","formatDate","format","timeZone","formatdateDMY","dateString","formatDistanceToNow","locale","viLocale","addSuffix"],"mappings":"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","file":"static/js/14.45a8fede.chunk.js","sourcesContent":["import axisosClient from \"./axisosClient\";\r\n\r\nconst postApi = {\r\n    getPostAll: ()=>{\r\n        const url = `/posts`;\r\n        return axisosClient.get(url);\r\n    },\r\n    getPostBySlug: (slug)=>{\r\n        const url = `/posts/${slug}`;\r\n        return axisosClient.get(url);\r\n    },\r\n    addPost: (data)=>{\r\n        const url = `/posts`;\r\n        return axisosClient.post(url,{...data});\r\n    },\r\n    getComments: (id)=>{\r\n        const url = `/posts_comment/${id}`;\r\n        return axisosClient.get(url);\r\n    },\r\n    addComments: (data)=>{\r\n        const url = `/posts_comment`;\r\n        return axisosClient.post(url,{...data});\r\n    },\r\n    getThumsUbByPost: (post_id)=>{\r\n        const url = `/posts/thumb-up/${post_id}`;\r\n        return axisosClient.get(url);\r\n    },\r\n    likePost: (data)=>{\r\n        const url = `/like-post`;\r\n        return axisosClient.post(url,{...data});\r\n    },\r\n    removeLikePost: (data)=>{\r\n        const url = `/remove-like-post`;\r\n        return axisosClient.post(url,{...data});\r\n    },\r\n    checkUserLikePost: (params)=>{\r\n        const url = `/check-user-like-post`;\r\n        return axisosClient.get(url,{params});\r\n    },\r\n}\r\n\r\n\r\n\r\nexport default postApi;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ModeCommentIcon from '@mui/icons-material/ModeComment';\r\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"./PostItem.scss\";\r\n\r\nPostItem.propTypes = {\r\n    post: PropTypes.object,\r\n}\r\nPostItem.defaultProps = {\r\n    post: null,\r\n}\r\n\r\nfunction PostItem(props) {\r\n    const { post } = props;\r\n\r\n    return (\r\n        <Link to={`/client/posts/${post ? post.slug : ''}.html`}>\r\n            <div className=\"post__box\">\r\n                <h4 className=\"post__title\">\r\n                    {post ? post.name : ''}\r\n                </h4>\r\n                <div className=\"post__desc-short\">\r\n                <div dangerouslySetInnerHTML={{ __html: post ? post.description : '' }} />\r\n                </div>\r\n                <div className=\"post__view-comment\">\r\n                    <div className=\"post__view-comment__box\">\r\n                        <span className=\"post__view-comment__icon\">\r\n                            <ThumbUpAltIcon fontSize=\"small\" />\r\n                        </span>\r\n                        <span className=\"post__view-comment__text\">\r\n                        {post ? post.totalThumb : 0}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"post__view-comment__box\">\r\n                        <span className=\"post__view-comment__icon\">\r\n                            <ModeCommentIcon fontSize=\"small\" />\r\n                        </span>\r\n                        <span className=\"post__view-comment__text\">\r\n                        {post ? post.totalComment : 0}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PostItem\r\n\r\n","import { useEffect, useState } from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport LinkBreadcrumbs from '@mui/material/Link';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Link } from 'react-router-dom';\r\n//api \r\nimport postApi from \"api/postApi\";\r\n\r\nimport \"./PostPage.scss\";\r\nimport PostItem from \"../components/PostItem\";\r\n\r\n\r\nfunction ProductPage() {\r\n    const [posts, setPosts] = useState([]);\r\n    useEffect(() => {\r\n        const getPosts = async () => {\r\n            try {\r\n                const res = await postApi.getPostAll();\r\n                if (res.success) {\r\n                    setPosts(res.data);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log('error', error);\r\n            }\r\n        }\r\n        getPosts();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div role=\"presentation\">\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <LinkBreadcrumbs underline=\"hover\" color=\"inherit\" href=\"/\">\r\n                        MUI\r\n                    </LinkBreadcrumbs>\r\n                    <LinkBreadcrumbs\r\n                        underline=\"hover\"\r\n                        color=\"inherit\"\r\n                        href=\"/getting-started/installation/\"\r\n                    >\r\n                        Core\r\n                    </LinkBreadcrumbs>\r\n                    <Typography color=\"text.primary\">Bài viết</Typography>\r\n                </Breadcrumbs>\r\n            </div>\r\n            <div className=\"posts__wrapper\">\r\n                <article className=\"posts__main\">\r\n                    <h2 className=\"posts__main__title\">Danh sách bài viết</h2>\r\n                    <div className=\"posts__main__header\">\r\n                        <p className=\"posts__main__countTotal\">{[...posts].length} bài viết tìm thấy </p>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={6}>\r\n                                <Button variant=\"contained\" color=\"secondary\" size=\"medium\">Bài viết của tôi</Button>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Link to=\"/client/posts/create\">\r\n                                    <Button variant=\"contained\" color=\"primary\" size=\"medium\">Đăng bài</Button>\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                    <div className=\"posts__main__body\">\r\n                        <div className=\"posts__search\">\r\n                            <input type=\"text\" className=\"posts__search__input\" />\r\n                            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{ borderRadius: \"30%\" }}>\r\n                                <IconButton size=\"small\">\r\n                                    <SearchIcon sx={{ color: \"#fff\" }} />\r\n                                </IconButton>\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"posts__list\">\r\n                            {\r\n                                [...posts].length > 0 ?\r\n                                    [...posts].map(item => {\r\n                                        return <div className=\"posts__item\">\r\n                                            <PostItem key={item.id} post={item} />\r\n                                        </div>\r\n                                    })\r\n                                    : 'không có bài viết nào'\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"posts__paginion\">\r\n                        <Stack spacing={2}>\r\n                            <Pagination count={10} color=\"secondary\" />\r\n                        </Stack>\r\n                    </div>\r\n                </article>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default ProductPage;\r\n","import * as yup from \"yup\";\r\n\r\nexport const postSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập tiêu đề\")\r\n    .min(16, \"tiêu đề ít nhất 16 ký tự\"),\r\n});\r\n","\r\n// import { useState } from 'react';\r\n// Require Editor JS files.\r\nimport \"froala-editor/js/froala_editor.pkgd.min.js\";\r\nimport \"froala-editor/js/plugins.pkgd.min.js\";\r\nimport \"froala-editor/js/third_party/embedly.min.js\";\r\n// import \"froala-editor/js/plugins/fullscreen.min.js\"\r\n\r\n// Require Editor CSS files.\r\nimport \"froala-editor/css/froala_style.min.css\";\r\nimport \"froala-editor/css/froala_editor.pkgd.min.css\";\r\nimport \"froala-editor/css/third_party/embedly.min.css\";\r\n// import \"froala-editor/css/plugins/fullscreen.min.css\";\r\n\r\nimport Froala from \"react-froala-wysiwyg\";\r\n// import FroalaEditorView from \"react-froala-wysiwyg/FroalaEditorView\";\r\n\r\nimport \"./TextAreaFroala.scss\";\r\n\r\nexport default function TextAreaFroala(props) {\r\n   \r\n    return (\r\n        <Froala\r\n            // model={'sdfsdf'}\r\n            onModelChange={props.handleOnChangeDescription}\r\n            tag=\"textarea\"\r\n            config={{\r\n                attribution: false,\r\n                placeholder: \"Start typing...\",\r\n                toolbarButtons: {\r\n                    moreText: {\r\n                        buttons: [\r\n                            \"bold\",\r\n                            \"italic\",\r\n                            \"underline\",\r\n                            \"strikeThrough\",\r\n                            \"subscript\",\r\n                            \"superscript\",\r\n                            \"fontFamily\",\r\n                            \"fontSize\",\r\n                            \"textColor\",\r\n                            \"backgroundColor\",\r\n                            \"inlineClass\",\r\n                            \"inlineStyle\",\r\n                            \"clearFormatting\"\r\n                        ]\r\n                    },\r\n                    moreParagraph: {\r\n                        buttons: [\r\n                            \"alignLeft\",\r\n                            \"alignCenter\",\r\n                            \"formatOLSimple\",\r\n                            \"alignRight\",\r\n                            \"alignJustify\",\r\n                            \"formatOL\",\r\n                            \"formatUL\",\r\n                            \"paragraphFormat\",\r\n                            \"paragraphStyle\",\r\n                            \"lineHeight\",\r\n                            \"outdent\",\r\n                            \"indent\",\r\n                            \"quote\"\r\n                        ]\r\n                    },\r\n                    moreRich: {\r\n                        buttons: [\r\n                            \"insertLink\",\r\n                            \"insertImage\",\r\n                            \"insertVideo\",\r\n                            \"insertTable\",\r\n                            \"emoticons\",\r\n                            \"fontAwesome\",\r\n                            \"specialCharacters\",\r\n                            \"embedly\",\r\n                            \"insertFile\",\r\n                            \"insertHR\"\r\n                        ]\r\n                    },\r\n                    moreMisc: {\r\n                        buttons: [\r\n                            \"undo\",\r\n                            \"redo\",\r\n                            \"fullscreen\",\r\n                            \"print\",\r\n                            \"getPDF\",\r\n                            \"spellChecker\",\r\n                            \"selectAll\",\r\n                            \"html\",\r\n                            \"help\"\r\n                        ],\r\n                        align: \"right\",\r\n                        buttonsVisible: 2\r\n                    }\r\n                },\r\n                pluginsEnabled: [\r\n                    \"table\",\r\n                    \"spell\",\r\n                    \"quote\",\r\n                    \"save\",\r\n                    \"quickInsert\",\r\n                    \"paragraphFormat\",\r\n                    \"paragraphStyle\",\r\n                    \"help\",\r\n                    \"draggable\",\r\n                    \"align\",\r\n                    \"link\",\r\n                    \"lists\",\r\n                    \"file\",\r\n                    \"image\",\r\n                    \"emoticons\",\r\n                    \"url\",\r\n                    \"video\",\r\n                    \"embedly\",\r\n                    \"colors\",\r\n                    \"entities\",\r\n                    \"inlineClass\",\r\n                    \"inlineStyle\",\r\n                    // 'codeBeautif '\r\n                    // 'spellChecker',\r\n                    \"imageTUI\"\r\n                ]\r\n            }}\r\n        />\r\n    );\r\n}","import React,{useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n//validate\r\nimport { postSchema } from \"validates/clientValidate\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport TextAreaFroala from \"components/textarea/TextAreaFroala\";\r\n\r\nfunction FormAddPost(props) {\r\n    const [description,setDescription] = useState('');\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors }\r\n    } = useForm({ resolver: yupResolver(postSchema) });\r\n\r\n    const handleOnSubmit = (data) =>{\r\n        const obj = {\r\n            ...data,\r\n            description: description,\r\n        }\r\n        props.handleAddPost(obj);\r\n    }\r\n\r\n    const handleOnChangeDescription = (text)=>{\r\n        setDescription(text);\r\n    }\r\n\r\n    return (\r\n        <Box component=\"form\" noValidate onSubmit={handleSubmit(handleOnSubmit)}>\r\n            <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                Tiêu đề bài viết\r\n            </Typography>\r\n            <TextField\r\n                fullWidth\r\n                margin=\"normal\"\r\n                label=\"Tiêu đề bài viết\"\r\n                variant=\"outlined\"\r\n                {...register(\"name\")}\r\n                helperText={errors.name && `${errors.name?.message}`}\r\n                error={errors.name && true}\r\n            />\r\n            <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                Mô tả bài viết\r\n            </Typography>\r\n            <TextAreaFroala handleOnChangeDescription={handleOnChangeDescription} />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"medium\" sx={{ margin: \"30px 25px\" }}>\r\n                Đăng bài viết\r\n            </Button>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default FormAddPost\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport LinkBreadcrumbs from '@mui/material/Link';\r\n// api \r\nimport postApi from \"api/postApi\";\r\n//noti\r\nimport { useSnackbar } from 'notistack';\r\n//helper\r\nimport { handleNotiDialog } from \"helper/notify\";\r\n//redux\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\n\r\nimport \"./AddPostPage.scss\";\r\nimport PostItem from \"../components/PostItem\";\r\nimport FormAddPost from \"../components/FormAddPost\";\r\nimport ProccessDialog from \"components/dialog/ProccessDialog\";\r\n\r\nfunction AddPostPage(props) {\r\n    const user = useSelector(state => state.auth.user);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    /*********state*********/\r\n    const [isProccess, setIsProccess] = useState(false);\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        await handleGetPost();\r\n    }, [])\r\n\r\n    /**********handle add post************/\r\n    const handleAddPost = async (data) => {\r\n        const newData = {\r\n            ...data,\r\n            user_id: user.id,\r\n        }\r\n        try {\r\n            setIsProccess(true);\r\n\r\n            const res = await postApi.addPost(newData);\r\n            if (res.success) {\r\n                handleNotiDialog(enqueueSnackbar, res.message, 'success');\r\n               await handleGetPost();\r\n            }\r\n            setIsProccess(false);\r\n\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n    /**********handle get post************/\r\n    const handleGetPost = async () => {\r\n        try {\r\n            const res = await postApi.getPostAll();\r\n            if (res.success) {\r\n                setPosts(res.data);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isProccess && <ProccessDialog />} {/* proccess page */}\r\n            <div role=\"presentation\">\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <LinkBreadcrumbs underline=\"hover\" color=\"inherit\" href=\"/\">\r\n                        MUI\r\n                    </LinkBreadcrumbs>\r\n                    <LinkBreadcrumbs\r\n                        underline=\"hover\"\r\n                        color=\"inherit\"\r\n                        href=\"/getting-started/installation/\"\r\n                    >\r\n                        Core\r\n                    </LinkBreadcrumbs>\r\n                    <Typography color=\"text.primary\">Thêm bài viết</Typography>\r\n                </Breadcrumbs>\r\n            </div>\r\n            <div className=\"posts__app__wrapper\">\r\n                <article className=\"posts__app__main\">\r\n                    <h2 className=\"posts__app__main__title\">Thêm bài viết</h2>\r\n                    <div className=\"posts__app__main__body\">\r\n                        <FormAddPost handleAddPost={handleAddPost} />\r\n                    </div>\r\n                </article>\r\n                <div className=\"posts__app__sidebar\">\r\n                    <div className=\"posts__app__list\">\r\n                        {\r\n                            [...posts].length > 0 ?\r\n                                [...posts].map(item => {\r\n                                    return (\r\n                                        <div key={item.id} className=\"posts__app__item\">\r\n                                            <PostItem post={item} />\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AddPostPage\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport Button from '@mui/material/Button';\r\n//helper\r\nimport { distanceToNow } from \"helper/FormatDate\";\r\n\r\nimport AvatarCircelShortText from \"components/avatar/AvatarCircelShortText\";\r\nimport \"./CommentsPost.scss\";\r\n\r\nCommentsPost.propTypes = {\r\n    comments: PropTypes.array,\r\n    handleToggleDialogReplyCommen: PropTypes.func,\r\n}\r\nCommentsPost.defaultProps = {\r\n    comments: [],\r\n}\r\n\r\nfunction CommentsPost(props) {\r\n    const { comments, handleToggleDialogReplyCommen } = props;\r\n\r\n    return (\r\n        <ul className=\"posts__cp__comments\">\r\n            {\r\n                [...comments].length > 0 ?\r\n                    [...comments].map(item => {\r\n                        //check has sub comment\r\n                        if ([...item.sub_comments].length > 0) {\r\n\r\n                            return <li key={item.id} className=\"posts__cp__comment\">\r\n                                <div className=\"posts__cp__comment__top\">\r\n                                    <div className=\"posts__cp__comment__image\">\r\n                                        <AvatarCircelShortText name={item.user.name} />\r\n                                    </div>\r\n                                    <div className=\"posts__cp__comment__user\">\r\n                                        <span>{item.user.name}</span>\r\n                                        <span><AccessTimeIcon fontSize=\"small\" /> {item ? distanceToNow(item.created_at) : ''}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"posts__cp__comment__body\">\r\n                                    {item.comment}\r\n                                </div>\r\n                                <div className=\"posts__cp__comment__bottom\">\r\n                                    <Button size=\"small\" onClick={() => handleToggleDialogReplyCommen(true, item.id)} >\r\n                                        Trả lời\r\n                                    </Button>\r\n                                </div>\r\n                                {\r\n                                    [...item.sub_comments].map(item => {\r\n                                        return <li key={item.id} className=\"posts__cp__comment posts__cp__comment-sub\">\r\n                                            <div className=\"posts__cp__comment__top\">\r\n                                                <div className=\"posts__cp__comment__image\">\r\n                                                    <AvatarCircelShortText name={item.user.name} />\r\n                                                </div>\r\n                                                <div className=\"posts__cp__comment__user\">\r\n                                                    <span>{item.user.name}</span>\r\n                                                    <span><AccessTimeIcon fontSize=\"small\" />  {item ? distanceToNow(item.created_at) : ''}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"posts__cp__comment__body\">\r\n                                                {item.comment}\r\n                                            </div>\r\n                                            <div className=\"posts__cp__comment__bottom\">\r\n                                                <Button size=\"small\" onClick={() => handleToggleDialogReplyCommen(true, item.id)}>\r\n                                                    Trả lời\r\n                                                </Button>\r\n                                            </div>\r\n                                        </li>\r\n                                    })\r\n                                }\r\n                            </li>\r\n\r\n\r\n                        } else {\r\n                            return <li key={item.id} className=\"posts__cp__comment\">\r\n                                <div className=\"posts__cp__comment__top\">\r\n                                    <div className=\"posts__cp__comment__image\">\r\n                                        <AvatarCircelShortText name={item.user.name} />\r\n                                    </div>\r\n                                    <div className=\"posts__cp__comment__user\">\r\n                                        <span>{item.user.name}</span>\r\n                                        <span><AccessTimeIcon fontSize=\"small\" />  {item ? distanceToNow(item.created_at) : ''}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"posts__cp__comment__body\">\r\n                                    {item.comment}\r\n                                </div>\r\n                                <div className=\"posts__cp__comment__bottom\">\r\n                                    <Button size=\"small\" onClick={() => handleToggleDialogReplyCommen(true, item.id)} >\r\n                                        Trả lời\r\n                                    </Button>\r\n                                </div>\r\n                            </li>\r\n                        }\r\n\r\n                    })\r\n                    : ''\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default CommentsPost\r\n\r\n","import React, {useRef} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function ReplyCommentDialog({ openDialogReplyComment, handleToggleDialogReplyCommen,hanldeReplyComment }) {\r\nconst refInput = useRef('');\r\n    return (\r\n        <Dialog \r\n        open={openDialogReplyComment} \r\n        onClose={() => handleToggleDialogReplyCommen()}\r\n        maxWidth='lg'\r\n        >\r\n            <DialogTitle>Trả lời bình luận</DialogTitle>\r\n            <DialogContent >\r\n                <TextareaAutosize\r\n                        aria-label=\"answre-comment\"\r\n                        minRows={4}\r\n                        placeholder=\"Trả lời bình luận\"\r\n                        style={{width: '50vw'}}\r\n                        ref={refInput}\r\n                    />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => handleToggleDialogReplyCommen()}>Hủy</Button>\r\n                <Button onClick={() => hanldeReplyComment(refInput.current.value)}>Bình luận</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport LinkBreadcrumbs from '@mui/material/Link';\r\nimport Button from '@mui/material/Button';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport Grid from '@mui/material/Grid';\r\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\r\n//api \r\nimport postApi from \"api/postApi\";\r\n//redux\r\nimport { useSelector } from 'react-redux';\r\n// helper\r\nimport { handleNotiDialog } from 'helper/notify';\r\nimport { distanceToNow } from \"helper/FormatDate\";\r\nimport { validateObjEmpty } from \"helper/validates\";\r\n// notify\r\nimport { useSnackbar } from 'notistack';\r\n\r\n\r\nimport \"./PostDetailPage.scss\";\r\nimport PostItem from \"../components/PostItem\";\r\nimport CommentsPost from \"../components/CommentsPost\";\r\nimport ReplyCommentDialog from \"../components/ReplyCommentDialog\";\r\n\r\n\r\nfunction PostDetailPage(props) {\r\n    const user = useSelector(state => state.auth.user);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    /********state *******/\r\n    const [summaryPost, setSummaryPost] = useState({ totalComment: 0, totalThumb: 0 });\r\n    const [likePost, setLikePost] = useState(false);\r\n    const [idPostReply, setIdPostReply] = useState(null);\r\n    const [openDialogReplyComment, setOpenDialogReplyComment] = useState(false);\r\n    const [btnLoading, setBtnLoading] = useState(false);\r\n    const [textComment, setTextComment] = useState('');\r\n    const [posts, setPosts] = useState([]);\r\n    const [post, setPost] = useState(null);\r\n    const [comments, setComments] = useState([]);\r\n    /********param url *******/\r\n    const { slug } = useParams();\r\n\r\n    /***************load page****************/\r\n    useEffect(() => {\r\n        Promise.all([getPostDetail(), getPosts()]);\r\n    }, [slug])\r\n    /***************get post****************/\r\n    const getPosts = async () => {\r\n        try {\r\n            const res = await postApi.getPostAll();\r\n            if (res.success) {\r\n                setPosts(res.data);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n    /***************get post detail ****************/\r\n    const getPostDetail = async () => {\r\n        try {\r\n            const res = await postApi.getPostBySlug(slug);\r\n            if (res.success) {\r\n                setPost(res.data);\r\n                await hanldeCheckUserLikePost(res.data.id);\r\n                await getThumsUpOfPost(res.data.id);\r\n                await getCommentOfPost(res.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n    /***************get list comment of post ****************/\r\n    const getCommentOfPost = async (post_id) => {\r\n        try {\r\n            const res = await postApi.getComments(post_id);\r\n            if (res.success) {\r\n              \r\n                setComments(res.data.listComment);\r\n                setSummaryPost({\r\n                    ...summaryPost,\r\n                    totalComment: res.data.totalComment,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n    /***************get thumsUp of post ****************/\r\n    const getThumsUpOfPost = async (post_id) => {\r\n        try {\r\n            const res = await postApi.getThumsUbByPost(post_id);\r\n            if (res.success) {\r\n                setSummaryPost({\r\n                    ...summaryPost,\r\n                    totalThumb: res.data.totalThumbsUp,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n    /***************handle add commnet****************/\r\n    const hanldeAddComment = async () => {\r\n        if (textComment === '') {\r\n            return\r\n        }\r\n        setBtnLoading(true);\r\n        try {\r\n            const data = {\r\n                comment: textComment,\r\n                user_id: user.id,\r\n                post_id: post.id\r\n            }\r\n            const res = await postApi.addComments(data);\r\n            if (res.success) {\r\n                await getCommentOfPost(post.id);\r\n                setTextComment('');\r\n                handleNotiDialog(enqueueSnackbar, res.message, 'success');\r\n            }\r\n            setBtnLoading(false);\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n    /***************handle change input comment****************/\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n\r\n        setTextComment(value);\r\n    }\r\n    /***************handle Toggle dialog comment****************/\r\n    const handleToggleDialogReplyCommen = (boolean = false, idPostReply = null) => {\r\n        setOpenDialogReplyComment(boolean);\r\n        setIdPostReply(idPostReply);\r\n    }\r\n    /***************handle reply comment****************/\r\n    const hanldeReplyComment = async (textComment) => {\r\n        if (textComment === '') {\r\n            return\r\n        }\r\n\r\n        try {\r\n            const data = {\r\n                comment: textComment,\r\n                user_id: user.id,\r\n                post_id: post.id,\r\n                parent_id: idPostReply\r\n            }\r\n            const res = await postApi.addComments(data);\r\n\r\n            if (res.success) {\r\n                let newComments = [...comments].map(item => {\r\n                    if (item.id === idPostReply) {\r\n                        item.sub_comments = [...item.sub_comments, res.data];\r\n                    }\r\n                    return item;\r\n                });\r\n                console.log('newComments', newComments);\r\n                handleToggleDialogReplyCommen();\r\n                setComments([res.data, ...comments]);\r\n                handleNotiDialog(enqueueSnackbar, res.message, 'success');\r\n            } else {\r\n                handleNotiDialog(enqueueSnackbar, res.message, 'error');\r\n            }\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n    /***************handle toggle like post****************/\r\n    const hangleToggleLikePost = async () => {\r\n        const islike = !likePost;\r\n        const data = {\r\n            user_id: user.id,\r\n            post_id: post.id,\r\n        };\r\n\r\n        try {\r\n            if (islike) {\r\n                await postApi.likePost(data);\r\n            } else {\r\n                await postApi.removeLikePost(data);\r\n            }\r\n            setLikePost(true);\r\n            getThumsUpOfPost(post.id);\r\n\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n\r\n    }\r\n    /***************handle check user like post****************/\r\n    const hanldeCheckUserLikePost = async (post_id) => {\r\n        if (validateObjEmpty(user)) {\r\n            return;\r\n        }\r\n        try {\r\n            const params = {\r\n                user_id: user.id,\r\n                post_id: post_id,\r\n            };\r\n            const res = await postApi.checkUserLikePost(params);\r\n            if (res.success) {\r\n                setLikePost(true);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('error', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {console.log('summaryPost',summaryPost)}\r\n            <ReplyCommentDialog\r\n                openDialogReplyComment={openDialogReplyComment}\r\n                handleToggleDialogReplyCommen={handleToggleDialogReplyCommen}\r\n                hanldeReplyComment={hanldeReplyComment}\r\n            />\r\n            <div role=\"presentation\">\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                    <LinkBreadcrumbs underline=\"hover\" color=\"inherit\" href=\"/\">\r\n                        MUI\r\n                    </LinkBreadcrumbs>\r\n                    <LinkBreadcrumbs\r\n                        underline=\"hover\"\r\n                        color=\"inherit\"\r\n                        href=\"/getting-started/installation/\"\r\n                    >\r\n                        Core\r\n                    </LinkBreadcrumbs>\r\n                    <Typography color=\"text.primary\">{post ? post.name : ''}</Typography>\r\n                </Breadcrumbs>\r\n            </div>\r\n            <div className=\"posts__pdp__wrapper\">\r\n                <article className=\"posts__pdp__main\">\r\n                    <h2 className=\"posts__pdp__main__title\"> {post ? post.name : ''} </h2>\r\n                    <div className=\"posts__pdp__main__post-date\">\r\n                        <span><AccessTimeIcon fontSize=\"small\" /> {post ? distanceToNow(post.created_at) : ''}</span>,\r\n                        <span><PersonOutlineIcon fontSize=\"small\" /> Nguyen dat</span>\r\n                    </div>\r\n                    <div className=\"posts__pdp__main__body\">\r\n                        <div className=\"posts__pdp__main__content\">\r\n                            <div dangerouslySetInnerHTML={{ __html: post ? post.description : '' }} />\r\n                        </div>\r\n                        <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Button\r\n                                size=\"medium\"\r\n                                startIcon={<ThumbUpAltIcon />}\r\n                                sx={{ color: `${likePost ? '#1976d2' : 'gray'}` }}\r\n                                onClick={hangleToggleLikePost}\r\n                            >\r\n                                Thích {summaryPost.totalThumb}\r\n                            </Button>\r\n                            <div className=\"posts__pdp__total-comments\">\r\n                                <h4>{summaryPost.totalComment} bình luận</h4>\r\n                            </div>\r\n                        </Grid>\r\n                        <div>\r\n                            <TextField\r\n                                fullWidth\r\n                                multiline\r\n                                margin=\"normal\"\r\n                                value={textComment}\r\n                                onChange={handleInputChange}\r\n                            />\r\n                            <LoadingButton\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"medium\"\r\n                                sx={{ margin: \"15px 25px\" }}\r\n                                // loadingPosition=\"end\"\r\n                                loading={btnLoading}\r\n                                onClick={hanldeAddComment}\r\n                            >\r\n                                Bình luận\r\n                            </LoadingButton>\r\n                        </div>\r\n                        <CommentsPost\r\n                            comments={comments}\r\n                            handleToggleDialogReplyCommen={handleToggleDialogReplyCommen}\r\n                        />\r\n                    </div>\r\n                </article>\r\n                <div className=\"posts__pdp__sidebar\">\r\n                    <div className=\"posts__pdp__list\">\r\n                        {\r\n                            [...posts].length > 0 ?\r\n                                [...posts].map(item => {\r\n                                    return <div key={item.id} className=\"posts__pdp__item\">\r\n                                        <PostItem key={item.id} post={item} />\r\n                                    </div>\r\n                                })\r\n                                : 'không có bài viết nào'\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PostDetailPage\r\n\r\n","export const validateObjEmpty = (object) =>{\r\n    if(Object.keys(object).length === 0){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}","import React from 'react';\r\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport PostsPage from \"./pages/PostsPage\";\r\nimport AddPostPage from \"./pages/AddPostPage\";\r\nimport PostDetailPage from \"./pages/PostDetailPage\";\r\n\r\nfunction Index(props) {\r\n    const match = useRouteMatch();\r\n    return (\r\n        <Switch>\r\n            <Route exact path={`${match.url}`} component={PostsPage} />\r\n            <Route exact path={`${match.url}/create`} component={AddPostPage} />\r\n            <Route path={`${match.url}/:slug.html`} component={PostDetailPage} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Index;\r\n\r\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\n\r\nconst ProccessDialog = props => {\r\n\r\n    return (\r\n        <Backdrop\r\n            sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n            open={true}\r\n        >\r\n            <CircularProgress color=\"secondary\" />\r\n        </Backdrop>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProccessDialog\r\n","import { format ,formatDistance,formatDistanceToNow} from 'date-fns'\r\nimport viLocale from \"date-fns/locale/vi\";\r\n\r\n\r\nexport function formatdateYMD(dateObj = new Date()) {\r\n    const formatDate = format(dateObj, 'yyyy-MM-dd',{timeZone: \"UTC\"})\r\n    return formatDate;\r\n}\r\n\r\nexport function formatdateDMY(dateString) {\r\n    const dateObj = new Date(dateString);\r\n    const formatDate = format(dateObj, 'dd/MM/yyyy',{timeZone: \"UTC\"})\r\n    return formatDate;\r\n}\r\n\r\nexport function distanceToNow(dateString) {\r\n    const distanceToNow = formatDistanceToNow(\r\n        new Date(dateString),\r\n        { locale: viLocale,addSuffix: true}\r\n    );\r\n    return distanceToNow;\r\n}"],"sourceRoot":""}