{"version":3,"sources":["assets/images/img-login.webp","components/auth/login/FormLogin.js","views/auth/LoginPage.js","validates/authValidate.js"],"names":["FormLogin","props","onHandleLogin","React","useState","weightRange","showPassword","values","setValues","useForm","resolver","yupResolver","loginSchema","register","handleSubmit","errors","formState","Box","component","noValidate","onSubmit","sx","mt","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","helperText","email","message","error","FormControl","variant","marginTop","InputLabel","htmlFor","color","password","OutlinedInput","he","type","endAdornment","InputAdornment","position","IconButton","onClick","edge","FormHelperText","Button","mb","Grid","container","item","xs","to","theme","createTheme","Login","isProccess","setIsProccess","history","useHistory","dispatch","useDispatch","enqueueSnackbar","useSnackbar","user","useSelector","state","auth","useEffect","goBack","handleLogin","data","a","LoginUserRedux","console","log","handleLoginGoogle","profileObj","newData","googleId","LoginGoogleRedux","ThemeProvider","ProccessDialog","height","CssBaseline","sm","md","backgroundImage","imgLogin","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","Typography","clientId","process","icon","onSuccess","onFailure","cookiePolicy","fontSize","yup","shape","min","registerSchema","max","confirm_password","when","is","val","length","then","oneOf","changePasswordSchema","old_password","password_confirmation","forgotPasswordSchema","resetPasswordSchema","otp"],"mappings":"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","file":"static/js/38.7ee2efc5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/img-login.251a0f43.webp\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormHelperText from '@mui/material/FormHelperText';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\n//validate\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport {loginSchema} from \"validates/authValidate\";\r\n\r\nFormLogin.propTypes = {\r\n    onHandleLogin: PropTypes.func,\r\n}\r\n\r\nfunction FormLogin(props) {\r\n    const {onHandleLogin } = props;\r\n\r\n    const [values, setValues] = React.useState({\r\n        weightRange: '',\r\n        showPassword: false,\r\n      });\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors }\r\n      } = useForm({ resolver: yupResolver(loginSchema) });\r\n    \r\n      const handleClickShowPassword = () => {\r\n        setValues({\r\n          ...values,\r\n          showPassword: !values.showPassword,\r\n        });\r\n      };\r\n    \r\n    return (\r\n        <Box component=\"form\" noValidate onSubmit={handleSubmit(onHandleLogin)} sx={{ mt: 1 }}>\r\n            <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                {...register(\"email\")}\r\n                helperText={errors.email && `${errors.email?.message}`}\r\n                error={errors.email && true}\r\n            />\r\n            <FormControl fullWidth variant=\"outlined\" sx={{ marginTop: '16px' }}>\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" color={errors.password && 'error'}>Mật khẩu</InputLabel>\r\n                <OutlinedInput\r\n                    {...register(\"password\")}\r\n                    he\r\n                    error={errors.password && true}\r\n                    id=\"outlined-adornment-password\"\r\n                    type={values.showPassword ? 'text' : 'password'}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                edge=\"end\"\r\n                            >\r\n                                {values.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    label=\"Password\"\r\n                />\r\n                {errors.password && <FormHelperText sx={{ color: 'red' }} id=\"outlined-weight-helper-text\">{errors.password?.message}</FormHelperText>}\r\n            </FormControl>\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2 }}\r\n            >\r\n                Đăng Nhập\r\n            </Button>\r\n\r\n            <Grid container>\r\n                <Grid item xs>\r\n                    <Link to=\"/forgot-password\" variant=\"body2\">\r\n                        Quên Mật Khẩu?\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Link to=\"/register\" variant=\"body2\" color=\"primary\">\r\n                        {\"Chưa có tài khoản? Đăng Kí\"}\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default FormLogin\r\n\r\n","import { useState,useEffect } from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport GoogleIcon from '@mui/icons-material/Google';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { useHistory } from \"react-router-dom\";\r\n// notify\r\nimport { useSnackbar } from 'notistack';\r\n//redux\r\nimport { useDispatch,useSelector} from \"react-redux\";\r\nimport { LoginUserRedux ,LoginGoogleRedux} from 'redux/actions/AuthAction';\r\n\r\nimport imgLogin from \"assets/images/img-login.webp\";\r\nimport FormLogin from 'components/auth/login/FormLogin';\r\nimport ProccessDialog from \"components/dialog/ProccessDialog\";\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function Login() {\r\n  const [isProccess, setIsProccess] = useState(false);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  /*************** go to back page if logined ************/\r\n  const user = useSelector(state => state.auth.user);\r\n\r\nuseEffect(() => {\r\n  if (user) {\r\n      history.goBack();\r\n  }\r\n}, [])\r\n  /*************** handle login ************/\r\n  const handleLogin = async (data) => {\r\n    try {\r\n      setIsProccess(true);\r\n\r\n      dispatch(LoginUserRedux(enqueueSnackbar,history,data));\r\n\r\n      setIsProccess(false);\r\n\r\n    } catch (error) {\r\n      console.log('error: ' + error);\r\n    }\r\n\r\n  }\r\n  /*************** handle login google ************/\r\n  const handleLoginGoogle = (data) => {\r\n    const values = data.profileObj;\r\n    const newData = {\r\n      email:values.email,\r\n      googleId: values.googleId,\r\n      name:values.name,\r\n    }\r\n\r\n    try {\r\n      setIsProccess(true);\r\n\r\n    dispatch(LoginGoogleRedux(enqueueSnackbar,history,newData));\r\n\r\n      setIsProccess(false);\r\n\r\n    } catch (error) {\r\n      console.log('error: ' + error);\r\n    }\r\n  \r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n        {isProccess && <ProccessDialog />} {/* proccess page */}\r\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\r\n        <CssBaseline />\r\n        <Grid\r\n          item\r\n          xs={false}\r\n          sm={4}\r\n          md={7}\r\n          sx={{\r\n            backgroundImage: `url(${imgLogin})`,\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundColor: (t) =>\r\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n          }}\r\n        />\r\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n          <Box\r\n            sx={{\r\n              my: 8,\r\n              mx: 4,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Đăng Nhập\r\n            </Typography>\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <GoogleLogin\r\n                clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n                icon={false}\r\n                onSuccess={handleLoginGoogle}\r\n                onFailure={handleLoginGoogle}\r\n                cookiePolicy={'single_host_origin'}\r\n              // isSignedIn={true}\r\n              >\r\n                <IconButton aria-label=\"google\" color=\"error\" >\r\n                  <GoogleIcon sx={{ fontSize: 30 }} />\r\n                </IconButton>\r\n              </GoogleLogin>\r\n            </Box>\r\n            {/* login form */}\r\n            <FormLogin onHandleLogin={handleLogin} />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n}","import * as yup from \"yup\";\r\n\r\nexport const loginSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập email\")\r\n    .min(16, \"email ít nhất 18 ký tự\")\r\n    .email('Không đúng định dang email'),\r\n  password: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\")\r\n});\r\n\r\nexport const registerSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .min(8, \"Nhập ít nhất 8 ký tự\")\r\n    .max(50, \"Nhập tối đa 50 ký tự\")\r\n    .required(\"Vui lòng nhập họ tên\"),\r\n  email: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập email\")\r\n    .min(16, \"email ít nhất 16 ký tự\")\r\n    .email('Không đúng định dang email'),\r\n  password: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\"),\r\n  confirm_password: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\")\r\n    .when(\"password\", {\r\n      is: (val) => (val && val.length > 0 ? true : false),\r\n      then: yup.string().oneOf(\r\n        [yup.ref(\"password\")],\r\n        \"Xác mật khẩu không khớp\"\r\n      ),\r\n    })\r\n});\r\n\r\nexport const changePasswordSchema = yup.object().shape({\r\n  old_password: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\"),\r\n  password: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\"),\r\n  password_confirmation: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\")\r\n    .when(\"password\", {\r\n      is: (val) => (val && val.length > 0 ? true : false),\r\n      then: yup.string().oneOf(\r\n        [yup.ref(\"password\")],\r\n        \"Xác mật khẩu không khớp\"\r\n      ),\r\n    })\r\n});\r\n\r\n\r\nexport const forgotPasswordSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập email\")\r\n    .min(16, \"email ít nhất 16 ký tự\")\r\n    .email('Không đúng định dang email'),\r\n});\r\n\r\nexport const resetPasswordSchema = yup.object().shape({\r\n  password: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\"),\r\n  password_confirmation: yup\r\n    .string()\r\n    .required(\"Vui lòng nhập mật khẩu\")\r\n    .min(8, \"mật khẩu tối đa 8 ký tự\")\r\n    .when(\"password\", {\r\n      is: (val) => (val && val.length > 0 ? true : false),\r\n      then: yup.string().oneOf(\r\n        [yup.ref(\"password\")],\r\n        \"Xác mật khẩu không khớp\"\r\n      ),\r\n    }),\r\n    otp: yup\r\n    .string()\r\n    .required(\"Vui lòng mã otp\")\r\n});"],"sourceRoot":""}